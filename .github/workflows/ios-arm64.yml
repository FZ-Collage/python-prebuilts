name: Build Python iOS (arm64)

on:
  push:
    branches:
      - run-actions
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

env:
  PYTHON_VERSION: "3.13"
  IOS_ARCH: arm64

jobs:
  build-python-ios-arm64:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          repository: python/cpython
          ref: ${{ env.PYTHON_VERSION }}

      - name: Install autotools dependencies
        run: |
          brew install autoconf automake libtool

      - name: Build host macOS Python
        run: |
          ./configure --prefix=$(pwd)/cross-build/macOS
          make -j$(sysctl -n hw.logicalcpu) all
          make install
        shell: bash

      - name: Set environment path for iOS
        run: |
          export IOS_SDK=$(xcrun --sdk iphoneos --show-sdk-path)
          export CC=$(xcrun -sdk iphoneos -f clang)
          export CFLAGS="-isysroot $IOS_SDK -arch ${{ env.IOS_ARCH }} -mios-version-min=12.0"
          export LDFLAGS="$CFLAGS"
          export TARGET_DIR=$(pwd)/cross-build/iphoneos.${{ env.IOS_ARCH }}
          export AR=$(xcrun --sdk iphoneos --find ar)
          export RANLIB=$(xcrun --sdk iphoneos --find ranlib)
          mkdir -p deps_build
          echo "IOS_SDK=$IOS_SDK" >> $GITHUB_ENV
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CFLAGS=$CFLAGS" >> $GITHUB_ENV
          echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV
          echo "TARGET_DIR=$TARGET_DIR" >> $GITHUB_ENV
          mkdir -p deps_build
        shell: bash

      - name: Configure iOS dependencies
        shell: bash
        run: |
          export IOS_SDK=$(xcrun --sdk iphoneos --show-sdk-path)
          export CC=$(xcrun -sdk iphoneos -f clang)
          export CPP="$CC -E"
          export CFLAGS="-isysroot $IOS_SDK -arch ${{ env.IOS_ARCH }} -mios-version-min=12.0"
          export LDFLAGS="$CFLAGS"
          export TARGET_DIR=$(pwd)/cross-build/iphoneos.${{ env.IOS_ARCH }}
          export AR=$(xcrun --sdk iphoneos --find ar)
          export RANLIB=$(xcrun --sdk iphoneos --find ranlib)

          mkdir -p $TARGET_DIR

          cd deps_build

          git clone https://github.com/libffi/libffi.git
          cd libffi
          git checkout v3.5.1

          ./autogen.sh

          ./configure \
            --host=${{ env.IOS_ARCH }}-apple-ios \
            --prefix=$TARGET_DIR/libffi \
            --disable-shared \
            --enable-static \
            --disable-dependency-tracking \
            --disable-docs \
            --enable-closures \
            CC="$CC" \
            CPP="$CPP" \
            CFLAGS="$CFLAGS" \
            AR="$AR" \
            RANLIB="$RANLIB"

          make -j$(sysctl -n hw.logicalcpu)
          make install

          cd ..

          curl -LO https://github.com/tukaani-project/xz/releases/download/v5.8.1/xz-5.8.1.tar.gz
          tar -xf xz-5.8.1.tar.gz
          cd xz-5.8.1

          ./configure \
            --host=${{ env.IOS_ARCH }}-apple-ios \
            --prefix=$TARGET_DIR/xz \
            --disable-shared \
            --enable-static \
            CC="$CC" \
            CPP="$CPP" \
            CFLAGS="$CFLAGS" \
            AR="$AR" \
            RANLIB="$RANLIB"

          make -j$(sysctl -n hw.logicalcpu)
          make install

          cd ..

          curl -LO https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
          tar -xf bzip2-1.0.8.tar.gz
          cd bzip2-1.0.8

          make clean

          make \
            CC="$CC" \
            CPP="$CPP" \
            CFLAGS="$CFLAGS" \
            AR="$AR" \
            RANLIB="$RANLIB" \
            -j$(sysctl -n hw.logicalcpu) libbz2.a bzip2 bzip2recover

          make install PREFIX=$TARGET_DIR/bzip2

          cd ..

          curl -LO https://www.openssl.org/source/openssl-1.1.1w.tar.gz
          tar -xf openssl-1.1.1w.tar.gz
          cd openssl-1.1.1w

          ./Configure ios64-cross no-shared no-dso \
            --prefix=$TARGET_DIR/openssl \
            CC="$CC" \
            CPP="$CPP" \
            CFLAGS="$CFLAGS" \
            AR="$AR" \
            RANLIB="$RANLIB"

          make -j$(sysctl -n hw.logicalcpu)
          make install_sw

          cd ..

          curl -LO https://github.com/facebook/zstd/releases/download/v1.5.6/zstd-1.5.6.tar.gz
          tar -xf zstd-1.5.6.tar.gz
          cd zstd-1.5.6

          make CC="$CC" CFLAGS="$CFLAGS" AR="$AR" RANLIB="$RANLIB" -j$(sysctl -n hw.logicalcpu) lib-release
          make PREFIX="$TARGET_DIR/zstd" CC="$CC" AR="$AR" RANLIB="$RANLIB" install

          cd ..

      - name: Clean Python build before iOS configure
        shell: bash
        run: |
          find . -name '*.o' -delete

      - name: Configure Python for iOS amd64
        run: |
          export SDKROOT=$(xcrun --sdk iphoneos --show-sdk-path)
          export CC=$(xcrun --sdk iphoneos --find clang)
          export CPP="$CC -E"
          export AR=$(xcrun --sdk iphoneos --find ar)
          export RANLIB=$(xcrun --sdk iphoneos --find ranlib)

          export TARGET_DIR=$(pwd)/cross-build/iphoneos.${{ env.IOS_ARCH }}
          export ZSTD_CFLAGS="-I$TARGET_DIR/zstd/include"
          export ZSTD_LIBS="-L$TARGET_DIR/zstd/lib -lzstd"
        
          export LIBFFI_CFLAGS="-I$TARGET_DIR/libffi/include"
          export LIBFFI_LIBS="-L$TARGET_DIR/libffi/lib -lffi"

          unset PKG_CONFIG_PATH
          unset LIBRARY_PATH
          unset LD_LIBRARY_PATH

          export CFLAGS="$ZSTD_CFLAGS $LIBFFI_CFLAGS -isysroot $SDKROOT -arch ${{ env.IOS_ARCH }} -mios-version-min=12.0 -fPIC"
          export LDFLAGS="$ZSTD_LIBS $LIBFFI_LIBS $CFLAGS"

          ./configure \
            ZSTD_CFLAGS="$ZSTD_CFLAGS" \
            ZSTD_LIBS="$ZSTD_LIBS" \
            LIBLZMA_CFLAGS="-I$TARGET_DIR/xz/include -I$TARGET_DIR/xz/include/lzma" \
            LIBLZMA_LIBS="-L$TARGET_DIR/xz/lib -llzma" \
            BZIP2_CFLAGS="-I$TARGET_DIR/bzip2/include" \
            BZIP2_LIBS="-L$TARGET_DIR/bzip2/lib -lbz2" \
            LIBFFI_CFLAGS="$LIBFFI_CFLAGS" \
            LIBFFI_LIBS="$LIBFFI_LIBS" \
            --prefix="$TARGET_DIR" \
            --with-openssl="$TARGET_DIR/openssl" \
            --host=${{ env.IOS_ARCH }}-apple-ios12.0 \
            --build=${{ env.IOS_ARCH }}-apple-darwin \
            --with-build-python="$(pwd)/cross-build/macOS/bin/python${{ env.PYTHON_VERSION }}" \
            --enable-framework="$TARGET_DIR" \
            --without-system-libzstd \
            CC="$CC" \
            CPP="$CPP" \
            AR="$AR" \
            RANLIB="$RANLIB"
        shell: bash

      - name: Build Python for iOS amd64
        run: |
          export CC=$(xcrun --sdk iphoneos --find clang)
          export CPP="$CC -E"
          export AR=$(xcrun --sdk iphoneos --find ar)
          export RANLIB=$(xcrun --sdk iphoneos --find ranlib)

          unset PKG_CONFIG_PATH
          unset LIBRARY_PATH
          unset LD_LIBRARY_PATH

          make CC="$CC" CPP="$CPP" AR="$AR" RANLIB="$RANLIB" -j$(sysctl -n hw.logicalcpu)
        shell: bash

      - name: Install Python for iOS amd64
        run: |
          make install
        shell: bash
      
      - name: tar.gz files
        run: |
          cd ${{ env.TARGET_DIR }}
          tar -cvf ../python-${{ env.PYTHON_VERSION }}-ios-${{ env.IOS_ARCH }}.tar.gz *

      - name: Upload Python iOS amd64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-${{ env.PYTHON_VERSION }}-ios-${{ env.IOS_ARCH }}
          path: python-${{ env.PYTHON_VERSION }}-ios-${{ env.IOS_ARCH }}.tar.gz
